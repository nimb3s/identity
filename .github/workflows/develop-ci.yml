name: develop

on:
  push:
    branches: [ develop, feature/**, release/**, hotfix/**, support/** ]
  pull_request:
    branches: [ develop ]

jobs:
  build:

    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Checkout branch
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Setup SemVer
      uses: dotnet/nbgv@v0.4.0
      with:
        setAllVars: true

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      env:
        ASPNETCORE_ENVIRONMENT : Development
      run: dotnet build --no-restore --configuration Release
#    - name: Test
#      run: dotnet test --no-build --verbosity normal

    # - name: Get branch name
    #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV      

    # - name: Upload Build Artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: BuildArtifacts-${{env.RELEASE_VERSION}}
    #     path: .

  api_docker_image:
    
    needs: build

    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        #os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
        run: |
          echo "CloudBuildNumber $NBG_CloudBuildNumber
          echo "VersionFileFound $NBG_VersionFileFound
          echo "AssemblyVersion $NBG_AssemblyVersion
          echo "AssemblyFileVersion $NBG_AssemblyFileVersion
          echo "AssemblyInformationalVersion $NBG_AssemblyInformationalVersion
          echo "PublicRelease $NBG_PublicRelease
          echo "PrereleaseVersion $NBG_PrereleaseVersion
          echo "PrereleaseVersionNoLeadingHyphen $NBG_PrereleaseVersionNoLeadingHyphen
          echo "SimpleVersion $NBG_SimpleVersion
          echo "BuildNumber $NBG_BuildNumber
          echo "VersionRevision $NBG_VersionRevision
          echo "MajorMinorVersion $NBG_MajorMinorVersion
          echo "VersionMajor $NBG_VersionMajor
          echo "VersionMinor $NBG_VersionMinor
          echo "GitCommitId $NBG_GitCommitId
          echo "GitCommitIdShort $NBG_GitCommitIdShort
          echo "GitCommitDate $NBG_GitCommitDate
          echo "VersionHeight $NBG_VersionHeight
          echo "VersionHeightOffset $NBG_VersionHeightOffset
          echo "Version $NBG_Version
          echo "BuildMetadataFragment $NBG_BuildMetadataFragment
          echo "NuGetPackageVersion $NBG_NuGetPackageVersion
          echo "ChocolateyPackageVersion $NBG_ChocolateyPackageVersion
          echo "NpmPackageVersion $NBG_NpmPackageVersion
          echo "SemVer1 $NBG_SemVer1
          echo "SemVer2 $NBG_SemVer2

      # - name: Login to DockerHub Registry
      #   run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # - name: Docker - API Building tagged image
      #   run: docker build -f "src/Nimb3s.Identity.Api/Dockerfile" --tag nimb3s/identity.api:${{env.RELEASE_VERSION}} --force-rm --label "com.microsoft.visual-studio.project-name=Nimb3s.Identity.Api" . --progress plain
        
      # - name: Docker - API Pushing tagged image to dockerhub
      #   run: docker push nimb3s/identity.api:${{env.RELEASE_VERSION}}

  # database_docker_image:
  #   needs: build
  #   runs-on: ${{matrix.os}}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: [ubuntu-18.04]
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: 5.0.x
  #     - name: Get docker tag name
  #       run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV      
  #     - name: Login to DockerHub Registry
  #       run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
  #     - name: Docker - Database Building tagged image
  #       run: docker build -f "src/Nimb3s.Identity.Database/Dockerfile" --tag nimb3s/identity.database:${{env.RELEASE_VERSION}} --force-rm --label "com.microsoft.visual-studio.project-name=Nimb3s.Identity.Database" . --progress plain
  #     - name: Docker - Database Pushing tagged image to dockerhub
  #       run: docker push nimb3s/identity.database:${{env.RELEASE_VERSION}}
